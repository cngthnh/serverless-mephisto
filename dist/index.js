import*as e from"@actions/core";import{createRequire as s}from"module";var t={};(()=>{t.d=(e,s)=>{for(var o in s){if(t.o(s,o)&&!t.o(e,o)){Object.defineProperty(e,o,{enumerable:true,get:s[o]})}}}})();(()=>{t.o=(e,s)=>Object.prototype.hasOwnProperty.call(e,s)})();if(typeof t!=="undefined")t.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var o={};var x=e=>{var s={};t.d(s,e);return s};var y=e=>()=>e;const n=x({["info"]:()=>e.info,["setFailed"]:()=>e.setFailed});const r=s(import.meta.url)("child_process");const sleep=e=>new Promise((s=>setTimeout(s,e)));const execAsync=async(e,s=undefined)=>{let t=false;const o=r.exec(e,s);o.stdout?.on("data",(e=>{(0,n.info)(e)}));o.stderr?.on("data",(e=>{(0,n.info)(e)}));o.stdout?.on("close",(()=>{t=true}));while(!t){await sleep(5e3)}};async function run(){try{(0,n.info)("Cloning deployment kit into the board");await execAsync(`git clone --branch ${process.env.SVLD_VERSION} https://github.com/d-lab/serverless-mephisto .deploy`);await execAsync("mkdir -p ./.deploy/app_src && rsync -a --exclude=./.deploy ./ ./.deploy/app_src");(0,n.info)("Signing in ECR");await execAsync(`aws ecr get-login-password --region ${process.env.AWS_REGION} | docker login --username AWS `+`--password-stdin ${process.env.AWS_ACCOUNT_ID}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com`);(0,n.info)("Installing dependencies...");await execAsync(`cd .deploy && npm install`);await execAsync(`sudo apt install -y jq`);(0,n.info)("Deploying...");const e=(new Date).getTime();let s=r.exec(`cd .deploy && echo "${process.env.APP_ENV}" | npm run deploy`);s.stdout?.on("data",(e=>{(0,n.info)(e)}));s.stderr?.on("data",(e=>{(0,n.info)("stderr: "+e)}));s.on("exit",(async()=>{const s=Math.ceil(((new Date).getTime()-e)/6e4);(0,n.info)(`Deployment process time: ${s} minutes`);let t=null;if(process.env.MTURK_TYPE?.includes("mturk")){if(process.env.APP_ENV==="prod"||process.env.APP_ENV==="test"||process.env.APP_ENV==="sb"){t="%mturk.com/mturk/preview?groupId=%"}else{t="%Mock task launched.* for preview%"}}else if(process.env.MTURK_TYPE?.includes("prolific")){if(process.env.APP_ENV==="prod"||process.env.APP_ENV==="test"||process.env.APP_ENV==="sb"){t="%Prolific Study .* has been published successfully with ID%"}else{t="%Mock task launched.* for preview%"}}(0,n.info)("Preview URL pattern: "+t);(0,n.info)("Waiting for confirmation...");const o=t?.slice(1,-1);const r=`$(aws ecs list-tasks --cluster ${process.env.APP_ENV}-${process.env.APP_NAME}-DefaultServiceStack-cluster --desired-status RUNNING | jq -r '.taskArns[0]' | awk -v delimeter='task/' '{split($0,a,delimeter)} END{print a[2]}' | awk -v delimeter='-cluster/' '{split($0,a,delimeter)} END{printf "%s/%s-container/%s", a[1], a[1], a[2]}' || '')`;await execAsync(`while ! aws logs tail mephisto-apps-log-group --log-stream-names ${r} --filter-pattern '${t}' --since ${s}m | grep '${o}'; do sleep 5; echo 'Scanning for logs...'; done`,{timeout:18e5});await execAsync(`aws logs tail mephisto-apps-log-group --log-stream-names ${r} --filter-pattern '${t}' --since ${s}m`)}))}catch(e){(0,n.setFailed)(e)}}run();