import*as e from"@actions/core";import{createRequire as o}from"module";var t={};(()=>{t.d=(e,o)=>{for(var n in o){if(t.o(o,n)&&!t.o(e,n)){Object.defineProperty(e,n,{enumerable:true,get:o[n]})}}}})();(()=>{t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o)})();if(typeof t!=="undefined")t.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var n={};var x=e=>{var o={};t.d(o,e);return o};var y=e=>()=>e;const r=x({["info"]:()=>e.info,["setFailed"]:()=>e.setFailed});const i=o(import.meta.url)("child_process");async function run(){try{(0,r.info)("Cloning deployment kit into the board");i.execSync(`git clone --branch ${process.env.SVLD_VERSION} https://github.com/d-lab/serverless-mephisto .deploy`);i.execSync("mkdir -p ./.deploy/app_src && rsync -a --exclude=./.deploy ./ ./.deploy/app_src");(0,r.info)("Installing dependencies...");let e=i.execSync(`cd .deploy && npm install`);(0,r.info)(e.toString());(0,r.info)("Deploying...");const o=(new Date).getTime();let t=i.exec(`cd .deploy && echo "${process.env.APP_ENV}" | npm run deploy`);t.stdout?.on("data",(e=>{(0,r.info)(e)}));t.stderr?.on("data",(e=>{(0,r.info)("stderr: "+e)}))}catch(e){(0,r.setFailed)(e)}}run();