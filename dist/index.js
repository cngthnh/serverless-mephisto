import*as e from"@actions/core";import{createRequire as t}from"module";var i={};(()=>{i.d=(e,t)=>{for(var s in t){if(i.o(t,s)&&!i.o(e,s)){Object.defineProperty(e,s,{enumerable:true,get:t[s]})}}}})();(()=>{i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)})();if(typeof i!=="undefined")i.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var s={};var x=e=>{var t={};i.d(t,e);return t};var y=e=>()=>e;const r=x({["info"]:()=>e.info,["setFailed"]:()=>e.setFailed});const n=t(import.meta.url)("child_process");const sleep=e=>new Promise((t=>setTimeout(t,e)));const execAsync=async(e,t=undefined,i=undefined)=>{let s=false;const o=n.exec(e,t);o.stdout?.on("data",(e=>{(0,r.info)(applyFilter(e,i))}));o.stderr?.on("data",(e=>{(0,r.info)(applyFilter(e,i))}));o.stdout?.on("close",(()=>{s=true}));while(!s){await sleep(5e3)}};function applyFilter(e,t){if(!t){return e}let i=e;if(t.replace){i=i.replaceAll(t.replace.pattern,t.replace.by)}return i}const o=t(import.meta.url)("fs");async function run(){try{(0,r.info)("Cloning deployment kit into the board");await execAsync(`git clone --branch ${process.env.SVLD_VERSION} https://github.com/cngthnh/serverless-mephisto .deploy`);await execAsync("mkdir -p ./.deploy/app_src && rsync -a ./app ./.deploy/app_src");(0,r.info)("Signing in ECR");await execAsync(`aws ecr get-login-password --region ${process.env.AWS_REGION} | docker login --username AWS `+`--password-stdin ${process.env.AWS_ACCOUNT_ID}.dkr.ecr.${process.env.AWS_REGION}.amazonaws.com`);(0,r.info)("Installing dependencies...");await execAsync(`cd .deploy && npm install`);await execAsync(`sudo apt install -y jq`);(0,r.info)("Deploying...");const e=(new Date).getTime();let t=n.exec(`cd .deploy && echo "${process.env.APP_ENV}" | npm run deploy`);t.stdout?.on("data",(e=>{(0,r.info)(e)}));t.stderr?.on("data",(e=>{(0,r.info)("stderr: "+e)}));t.on("exit",(async()=>{const t=(new Date).getTime()-e;let i=Math.ceil(t/6e4);(0,r.info)(`Deployment process time: ${i} minutes`);let s=null;const n=o.readFileSync("./.deploy/app_src/app/deploy.py","utf-8").split("\n").map((e=>e.trim().toLowerCase())).filter((e=>e.startsWith("default_config_file")&&e.includes("prolific")));if(process.env.APP_ENV==="prod"){if(n.filter((e=>e.includes("prod"))).length>0){(0,r.info)("Using Prolific");s="%Prolific Study .* has been published successfully with ID%"}else{(0,r.info)("Using MTurk");s="%mturk\\.com/mturk/preview\\?groupId=%"}}if(process.env.APP_ENV==="test"||process.env.APP_ENV==="sb"){if(n.filter((e=>e.includes("test")||e.includes("sb"))).length>0){(0,r.info)("Using Prolific");s="%Prolific Study .* has been published successfully with ID%"}else{(0,r.info)("Using MTurk");s="%mturk\\.com/mturk/preview\\?groupId=%"}}else{s="%Mock task launched.* for preview%"}const a=s?.slice(1,-1).replaceAll("\\","");(0,r.info)("Preview URL pattern: "+s);(0,r.info)("Waiting for confirmation...");const l=`$(aws ecs list-tasks --cluster ${process.env.APP_ENV}-${process.env.APP_NAME}-DefaultServiceStack-cluster --desired-status RUNNING | jq -r '.taskArns[0]' | awk -v delimeter='task/' '{split($0,a,delimeter)} END{print a[2]}' | awk -v delimeter='-cluster/' '{split($0,a,delimeter)} END{printf "%s/%s-container/%s", a[1], a[1], a[2]}' || '')`;const c=18e5;await execAsync(`export check_time="${new Date(e).toISOString()}" && while ! aws logs tail mephisto-apps-log-group --log-stream-names ${l} --filter-pattern="${s}" --since ${i}m | grep "${a}"; do export last_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ"); aws logs tail mephisto-apps-log-group --log-stream-names ${l} --since $check_time; export check_time=$last_time; sleep 2; done`,{timeout:c},{replace:{pattern:new RegExp(`${process.env.APP_ENV}-${process.env.APP_NAME}-DefaultServiceStack/${process.env.APP_ENV}-${process.env.APP_NAME}-DefaultServiceStack-container/[a-zA-Z0-9]+`,"g"),by:""}});if((new Date).getTime()-e>=c+t){(0,r.setFailed)("Can't get confirmation before timeout")}}))}catch(e){(0,r.setFailed)(e)}}run();